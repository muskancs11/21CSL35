A class is a template for an object, and an object is an instance of a class.
A class creates a new data type that can be used to create objects.
When you declare an object of a class, you are creating an instance of that class.

Inheritance in Java is a concept that acquires the properties from one class to other classes
To inherit a class, you simply incorporate the definition of one class into another by using the extends keyword.

Overloading Methods:
In Java, it is possible to define two or more methods within the same class that share the same name,
as long as their parameter declarations are different.
While overloaded methods may have different return types, the return type alone is insufficient to distinguish two
versions of a method. When Java encounters a call to an overloaded method, it simply executes the version of the method
whose parameters match the arguments used in the call.
In some cases, Javaâ€™s automatic type conversions can play a role in overload resolution.

Packages are containers for classes. They are used to keep the class name space compartmentalized.
For example, a package allows you to create a class named List, which you can store in your own package without
concern that it will collide with some other class named List stored elsewhere. Packages are stored in a hierarchical
manner and are explicitly imported into new class definitions.

Interface is like class but not completely. it is like an abstract class.
By default functions are public and abstract in interface.
abstraction - Sometimes you will want to create a superclass that only defines a generalized form that will be shared by all of its
subclasses, leaving it to each subclass to fill in the details. Such a class determines the nature of the methods that
the subclasses must implement. You may have methods that must be overridden by the subclass in order for the subclass to have any meaning.
variables are final and static by default in interface.
Interfaces specify only what the class is doing, not how it is doing it.

Multithreading in Java is a process of executing multiple threads simultaneously
Multithreading is used to achieve multitasking.
Threads use a shared memory area. They don't allocate separate memory area so saves memory, and context-switching between the threads takes less time than process.
Threads are independent
Java provides Thread class to achieve thread programming
Thread class provides constructors and methods to create and perform operations on a thread.
Thread class extends Object class and implements Runnable interface.
start() - used to start the execution of the thread
run() - used to do an action for a thread.
sleep() - sleeps a thread for the specified amount of time.
Thread. sleep() method can be used to pause the execution of current thread for specified time in milliseconds
The argument value for milliseconds can't be negative, else it throws IllegalArgumentException
if a Thread is sleeping, the thread may be interrupted 
If any other thread interrupts when the thread is sleeping, then InterruptedException will be thrown

Collection in Java is a framework which contains set of classes and interfaces, that provides an architecture to store and manipulate the group of objects.
It is a single unit of objects.
You can perform operations on data such as searching, sorting, insertion, manipulation, and deletion.
The ArrayList class implements the List interface
ArayList class is resizable (Dynamic) array
ArrayList is found in java.util package
ArrayList<data-type> obj = new ArrayList<data_type>();
ArrayList class has many useful method
Add()
Get()
Set()
Remove()
indexOf()
Size()

The Exception Handling in Java is one of the powerful mechanism to handle the runtime errors so that the normal flow of the application can be maintained
Exception is an event that disrupts the normal flow of the program. It is an object which is thrown at runtime.
The java.lang.Throwable class is the root class of Java Exception
Which is  inherited by two subclasses: Exception and Error
There are mainly two types of exceptions: 
checked 
unchecked
Checked exceptions are checked at compile-time. Such as IOException, SQLException etc.
Unchecked exceptions are not checked at compile-time, but they are checked at runtime. Such as ArithmeticException, NullPointerException, ArrayIndexOutOfBoundsException, etc
Java provides five keywords that are used to handle the exception
try    - place an exception code
catch  - handle the exception
finally - execute the necessary code
throw - throw an exception
throws - declare exceptions

A named location used to store related information is known as a File
There are several File Operations like 
creating a new File, 
getting information about File, 
writing into a File, 
reading from a File and 
deleting a File.
createNewFile() - used to create a new empty file.
canRead() - used to check whether we can read the data of the file or not.
canWrite() - used to check whether we can write the data into the file or not.
exists() - used to check whether the specified file is present or not.
delete() - used to delete a file.
getName()  - used to find the file name.
length() - used to get the size of the file in bytes.
toString() - returns the String representation of the object.
lastIndexOf() - returns the position of the last occurrence of specified character(s) in a string, If it is not found, it returns -1
substring() - returns a part of the string, We pass beginIndex and endIndex number position

Built-in Packages
Applet, awt, lang, io, util, net
